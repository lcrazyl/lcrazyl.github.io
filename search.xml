<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS3-过渡变形与动画</title>
    <url>/2021/08/04/CSS%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<hr>
<h2 id="过渡-transition-："><a href="#过渡-transition-：" class="headerlink" title="过渡(transition)："></a>过渡(<code>transition</code>)：</h2><blockquote>
<p>CSS3允许属性在一定时间内平滑过渡，过渡需要添加触发条件。</p>
</blockquote>
<h3 id="相关属性值："><a href="#相关属性值：" class="headerlink" title="相关属性值："></a>相关属性值：</h3><ul>
<li><p><code>transition-property</code>：检索或设置对象参与过渡的属性值；</p>
</li>
<li><p><code>transition-duration</code>：检索或设置对象过渡持续时间；</p>
</li>
<li><p><code>transition-delay</code>:检索或设置对象延迟过渡时间；</p>
</li>
<li><pre><code>transition-timing-function
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  :检索或设置对象过渡动画类型；</span><br><span class="line"></span><br><span class="line">  - `linear`:匀速；</span><br><span class="line">  - `ease`：逐渐慢下来；</span><br><span class="line">  - `ease-in`：加速；</span><br><span class="line">  - `ease-out`：减速;</span><br><span class="line">  - `ease-in-out`：先加速后减速</span><br><span class="line"></span><br><span class="line">属性值顺序可以调换，但过渡时间和延迟时间有先后顺序，在前的为过渡时间。</span><br><span class="line"></span><br><span class="line">## 2D变形属性：`transform`</span><br><span class="line"></span><br><span class="line">### 相关属性：</span><br><span class="line"></span><br><span class="line">- `translate()`：位移</span><br><span class="line">- `scale()`:缩放</span><br><span class="line">- `rotate()`：旋转</span><br><span class="line">- `skew()`：倾斜</span><br><span class="line"></span><br><span class="line">### 变形原点：</span><br><span class="line"></span><br><span class="line">&gt; 通常默认变形原点为元素的中心点。</span><br><span class="line"></span><br><span class="line">`transform-origin`属性即可设置变形原点，只对`rotate`、`scale`、`skew`有效,可以用英文单词、百分数、具体像素设置。例如设置`transform-origin:left bottom`即变形原点为左下。</span><br><span class="line"></span><br><span class="line">### 属性详解：</span><br><span class="line"></span><br><span class="line">- #### 位移：</span><br><span class="line"></span><br><span class="line">&gt; 将元素向指定方向移动，类似于`position:relative`；</span><br><span class="line"></span><br><span class="line">赋值方式：</span><br><span class="line"></span><br><span class="line">1. `transform:translate(100px)`:不加X或y轴，则默认X轴移动;</span><br><span class="line"></span><br><span class="line">2. `transform:translateX(100px)`：x轴移动；</span><br><span class="line"></span><br><span class="line">3. `transform:translateY(200px)`：y轴移动；</span><br><span class="line"></span><br><span class="line">4. `transform:translate(100px,100px)`:对角移动</span><br><span class="line">&lt;font color=&quot;red&quot;&gt;设置一个值，表示向x轴移动&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">![位移](https://raw.githubusercontent.com/lcrazyl/image/master/image/20210803203711.gif?ynotemdtimestamp=1628035839008)</span><br><span class="line"></span><br><span class="line">- #### 缩放：</span><br><span class="line"></span><br><span class="line">&gt; 元素根据中心原点对元素进行缩放。默认的值1</span><br><span class="line"></span><br><span class="line">赋值方式：</span><br><span class="line"></span><br><span class="line">1. `transform:scale(.5)`:不加X或y轴，默认代表X和y轴;</span><br><span class="line"></span><br><span class="line">2. `transform:scaleX(.5)`：x轴缩放；</span><br><span class="line"></span><br><span class="line">3. `transform:scaleY(.5)`：y轴缩放；</span><br><span class="line">&lt;font color=&quot;red&quot;&gt;设置一个值，表示x轴和y轴同时缩放&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">    ![缩放](https://raw.githubusercontent.com/lcrazyl/image/master/image/20210803203643.gif?ynotemdtimestamp=1628035839008)</span><br><span class="line"></span><br><span class="line">- #### 旋转：  </span><br><span class="line"></span><br><span class="line">&gt; 通过指定的角度参数对元素根据对象原点指定一个2D旋转。</span><br><span class="line"></span><br><span class="line">赋值方式：</span><br><span class="line"></span><br><span class="line">1. `transform:rotate(30deg)`:不加X或y轴，默认以中心点旋转;</span><br><span class="line"></span><br><span class="line">2. `transform:rotateX(30deg)`：x轴旋转；</span><br><span class="line"></span><br><span class="line">3. `transform:rotateY(30deg)`：y轴旋转；</span><br><span class="line">&lt;font color=&quot;red&quot;&gt;注意：只能接受一个值，设置两个值语法报错设置一个值，表示以中心点旋转&lt;/font&gt;</span><br><span class="line">![旋转](https://raw.githubusercontent.com/lcrazyl/image/master/image/2D%E6%97%8B%E8%BD%AC.gif?ynotemdtimestamp=1628035839008)</span><br><span class="line">- #### 倾斜：</span><br><span class="line"></span><br><span class="line">&gt; 将一个对象以其中心位置围绕着X轴和Y轴按照一定的角度倾斜。</span><br><span class="line"></span><br><span class="line">赋值方式：</span><br><span class="line">1. `transform:skew(45deg)`:不加X或y轴，默认代表X轴;</span><br><span class="line"></span><br><span class="line">2. `transform:skew(45deg)`：x轴旋转；</span><br><span class="line"></span><br><span class="line">3. `transform:skew(45deg)`：y轴旋转；</span><br><span class="line"></span><br><span class="line">&lt;font color=&quot;red&quot;&gt;设置一个值，表示水平方向倾斜&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">![倾斜](https://raw.githubusercontent.com/lcrazyl/image/master/image/2D%E5%80%BE%E6%96%9C.gif?ynotemdtimestamp=1628035839008)</span><br><span class="line"></span><br><span class="line">#### 2D变形必须结合`transition`属性使用，即必须有触发条件（鼠标点击、鼠标划入...）</span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">## 3D变换与3D动画：</span><br><span class="line"></span><br><span class="line">### 3D变换：</span><br><span class="line"></span><br><span class="line">&gt; 3D区别于2D的地方在于近大远小。</span><br><span class="line"></span><br><span class="line">#### 景深：（`perspective`）</span><br><span class="line"></span><br><span class="line">景深的作用即是设置元素与视线的距离感，即近大远小。 设置景深主要有两种方法：</span><br><span class="line"></span><br><span class="line">1. `perspective: 1200px;）`（在父元素中使用)</span><br><span class="line">2. `transform:perspective(1200px)` （在子元素中使用）</span><br><span class="line">   &lt;font color=&quot;red&quot;&gt;两个同时设置会发生冲突，通常数值在900-1200之间。&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">#### 变换原点：</span><br><span class="line"></span><br><span class="line">同上方2D方法相同，不在赘述。</span><br><span class="line"></span><br><span class="line">#### 实现3D场景：</span><br><span class="line"></span><br><span class="line">需要在父元素添加`transform-style:preserve-3d`属性。</span><br><span class="line"></span><br><span class="line">##### `transform`有关3D属性：</span><br><span class="line"></span><br><span class="line">- ##### 3D位移:`translate3d(tx,ty,tz)/translateZ()`  </span><br><span class="line"></span><br><span class="line">&lt;font color=&quot;red&quot;&gt;`translate3d(tx,ty,tz)`必须添加三个值，且不能为百分比否则无效。&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">- ##### 3D 旋转：`rotate3d()/rotateZ()`</span><br><span class="line"></span><br><span class="line">`rotate3d()`需要四个值，前三个值为矢量值，建议取1和0；1代表哪一个轴旋转，最后一个值指定角度。</span><br><span class="line"></span><br><span class="line">- ##### 3D 缩放：`scale3d()/scaleZ()`</span><br><span class="line"></span><br><span class="line">#### &lt;font color=&quot;red&quot;&gt;倾斜会改变元素形状，而旋转不会改变元素形状。&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">### 3D动画：</span><br><span class="line"></span><br><span class="line">#### 关键帧：</span><br><span class="line"></span><br><span class="line">3D动画不同于过渡只能定义首尾状态，关键帧可以定义任意个状态，由此实现更复杂动画。创建方法如下：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
@keyframes move&#123;
  0%&#123;初始时状态&#125;
  /*中间可以添加任意关键帧*/
  100%&#123;最终状态&#125;
&#125;
</code></pre>
</li>
</ul>
<p>创建完动画后就要使要改变的元素引用该动画。</p>
<h4 id="动画属性（animation）"><a href="#动画属性（animation）" class="headerlink" title="动画属性（animation）:"></a>动画属性（<code>animation</code>）:</h4><h5 id="相关属性："><a href="#相关属性：" class="headerlink" title="相关属性："></a>相关属性：</h5><ul>
<li><code>animation-name</code>：检索或设置动画名称，与<code>@keyframes</code>配合使用；</li>
<li><code>animation-duration</code>：同<code>transition</code>相同。</li>
<li><code>animation-timing-function</code>：同<code>transition</code>相同，增加<code>step-start</code>：马上跳到动画每一帧结束状态；</li>
<li><code>animation-delay</code>：同<code>transition</code>相同。</li>
<li><code>animation-iteration-count</code>：设置或检索动画循环次数<ul>
<li><code>infinite</code>：无限循环;</li>
<li><code>number</code>：具体次数；</li>
</ul>
</li>
<li><code>animation-direction</code>：检索或设置动画是否反向运动<ul>
<li><code>reverse</code> ：反向运动</li>
<li><code>alternate</code>：先正向运动再反向运动，并交替循环；</li>
</ul>
</li>
<li><code>animation-play-state</code>：检索或设置对象状态<ul>
<li><code>paused</code>暂停；</li>
<li><code>running</code>：运动</li>
<li><code>animation-play-state</code>：鼠标经过时停止，移开时继续。</li>
</ul>
</li>
</ul>
<p>由上可以看出<code>animation</code>和<code>transition</code>类似，那二者有什么异同点呢？</p>
<h4 id="变换与动画比较："><a href="#变换与动画比较：" class="headerlink" title="变换与动画比较："></a>变换与动画比较：</h4><table>
<thead>
<tr>
<th>相同点</th>
<th>不同点</th>
</tr>
</thead>
<tbody><tr>
<td>随着时间改变元素的css属性值</td>
<td><code>transition</code>需要触发一个事件，才会随时间改变css属性值</td>
</tr>
<tr>
<td></td>
<td><code>animation</code>不需要触发任何事件</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>img三像素</title>
    <url>/2021/07/29/img%E4%B8%89%E5%83%8F%E7%B4%A0/</url>
    <content><![CDATA[<p>-</p>
<h1 id="怎样解决img标签在严格模式下渲染会有三像素空白问题？"><a href="#怎样解决img标签在严格模式下渲染会有三像素空白问题？" class="headerlink" title="怎样解决img标签在严格模式下渲染会有三像素空白问题？"></a>怎样解决<code>img</code>标签在严格模式下渲染会有三像素空白问题？</h1><p>由于基线对齐，因此img图片下方会多出三像素，可采用以下解决方案：</p>
<ul>
<li><p>img标签增加<code>vertical-align:top/middle/bottom</code>；</p>
</li>
<li><p>img标签的父标签增加<code>font-size:0</code>；</p>
</li>
<li><p>img标签增加<code>display:block</code>；</p>
<span id="more"></span>

<p>三像素示意图：</p>
<img src="https://raw.githubusercontent.com/lcrazyl/image/master/image/img%E5%83%8F%E7%B4%A0.png" style="zoom: 33%;"></li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/07/22/CSS%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<hr>
<p>title: CSS布局之文档流浮动与定位</p>
<p>tags: CSS</p>
<p>categories: CSS</p>
<hr>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><ul>
<li>普通流（文档流）：自上而下，自左向右显示。</li>
<li>定位</li>
<li>浮动<h2 id="CSS浮动介绍："><a href="#CSS浮动介绍：" class="headerlink" title="CSS浮动介绍："></a>CSS浮动介绍：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">float:left;左浮动w</span><br><span class="line">float:right;右浮动</span><br></pre></td></tr></table></figure>
众所周知，块级元素在页面独占一行，即自上而下排列，如下图：<br><img src="https://raw.githubusercontent.com/lcrazyl/image/master/image/%E6%B5%AE%E5%8A%A81.png" alt="浮动1"><br>这就是所谓的标准文档流，因此想脱离文档流，让块级元素在一行显示就必须使用浮动。<blockquote>
<p>浮动就是脱离文档流，漂浮在文档流之上。</p>
</blockquote>
<h2 id="浮动折叠："><a href="#浮动折叠：" class="headerlink" title="浮动折叠："></a>浮动折叠：</h2>由于浮动元素会在其他元素上方，因此会造成遮挡问题，如下图：<br><img src="https://raw.githubusercontent.com/lcrazyl/image/master/image/%E6%B5%AE%E5%8A%A82.png" alt="浮动2"></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.div1&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: gold;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">.div2&#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>div1</code>设置左浮动后，<code>div2</code>移到上方。原因是<code>div1</code>脱离文档流，因此位置变为空，<code>div2</code>就会移到上方。</p>
<h6 id="由此可知，浮动会导致重叠，那下方div2浮动后会不会在div1的位置呢？"><a href="#由此可知，浮动会导致重叠，那下方div2浮动后会不会在div1的位置呢？" class="headerlink" title="由此可知，浮动会导致重叠，那下方div2浮动后会不会在div1的位置呢？"></a>由此可知，浮动会导致重叠，那下方<code>div2</code>浮动后会不会在<code>div1</code>的位置呢？</h6><p><img src="https://raw.githubusercontent.com/lcrazyl/image/master/image/%E6%B5%AE%E5%8A%A83.png" alt="浮动3"><br>答案是不会，<code>div3</code>会在<code>div2</code>的位置，而<code>div2</code>位置则不会变。</p>
<h3 id="因为div2浮动不会造成文字浮动，此时文字第div1和div2在同一层级，因此div2不会浮动。"><a href="#因为div2浮动不会造成文字浮动，此时文字第div1和div2在同一层级，因此div2不会浮动。" class="headerlink" title="因为div2浮动不会造成文字浮动，此时文字第div1和div2在同一层级，因此div2不会浮动。"></a>因为<code>div2</code>浮动不会造成文字浮动，此时文字第div1和<code>div2</code>在同一层级，因此<code>div2不会浮动</code>。</h3><h3 id="浮动不会覆盖同级元素，因此文字中和图片不会被覆盖-。"><a href="#浮动不会覆盖同级元素，因此文字中和图片不会被覆盖-。" class="headerlink" title="== 浮动不会覆盖同级元素，因此文字中和图片不会被覆盖 ==。"></a>== 浮动不会覆盖同级元素，因此文字中和图片不会被覆盖 ==。</h3><hr>
<h2 id="CSS定位："><a href="#CSS定位：" class="headerlink" title="CSS定位："></a>CSS定位：</h2><p><code>position</code>属性：</p>
<ul>
<li> <code>relative</code>:相对定位，相对于自身位置进行定位，且不脱离文档流且占位。</li>
<li> <code>absolute</code>:绝对定位，相对于最近有定位的父元素进行定位（若父元素没有定位，则根据html定位）,脱离文档流且不占位。</li>
<li> <code>fixed</code>：固定定位，相对于可视窗口定位，脱离文档流且不占位。</li>
<li> <code>stick</code>：粘性定位，当页面未滚出父元素，表现和<code>relative</code>相同，反之和<code>fixd</code>相同。<h2 id="高度塌陷："><a href="#高度塌陷：" class="headerlink" title="高度塌陷："></a>高度塌陷：</h2>高度塌陷指容器内子元素添加浮动属性，而容器本身不浮动。容器相当于浮动元素不存在的现象。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/lcrazyl/image/master/image/%E9%AB%98%E5%BA%A6%E5%A1%8C%E9%99%B7.gif" alt="高度塌陷"></p>
<h2 id="解决高度塌陷常用方法："><a href="#解决高度塌陷常用方法：" class="headerlink" title="解决高度塌陷常用方法："></a>解决高度塌陷常用方法：</h2><ul>
<li><ol>
<li>容器元素添加<code>overflow：hidden</code><br><br>缺点：兼容性问题；不能和positio共存，超出的尺寸会被隐藏</li>
</ol>
</li>
<li><ol start="2">
<li>在浮动元素下方添加一个空<code>div</code>,并声明<code>clear:both</code>。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clear:both;</span><br><span class="line">  /*防止空标签内有数据 */</span><br><span class="line">height:0;</span><br><span class="line">overflow:hidden;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
 <br>
 缺点：需要添加多余的空标签并添加属性。<br>
- 3. 父元素添加浮动
 缺点：产生新的浮动。<br>
- 4. 最佳方法：添加`::after`；
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">  content:&quot;&quot;</span><br><span class="line">  display: block;</span><br><span class="line">      clear: both;</span><br><span class="line">	height: 0;</span><br><span class="line">overflow: hidden;</span><br><span class="line">   /*visibility:hidden;为了去隐藏content中的内容 */</span><br><span class="line">visibility: hidden;</span><br></pre></td></tr></table></figure>

<h2 id="什么是BFC？"><a href="#什么是BFC？" class="headerlink" title="什么是BFC？"></a>什么是BFC？</h2><blockquote>
<p>Block Formatting Contexts（BFC），块级元素格式化上下文。它是一个独立的渲染区域，只有块元素参与，它规定了内部如何布局，并且与外界毫不相干。</p>
</blockquote>
<h3 id="触发条件是什么？"><a href="#触发条件是什么？" class="headerlink" title="触发条件是什么？"></a>触发条件是什么？</h3><ol>
<li><code>float</code>的值为<code>left/right</code>;<br></li>
<li><code>overflow</code>的值为<code>auto/hidden/scroll</code>;<br></li>
<li><code>position</code>的值为<code>absolute/fixed</code>;<br></li>
<li><code>display</code>的值为<code>table-cell/table-caption/inline-block</code>;<br></li>
<li>当前元素转换为根元素<code>display:flow-root</code>;(不推荐)<br><h3 id="触发方式是什么？"><a href="#触发方式是什么？" class="headerlink" title="触发方式是什么？"></a>触发方式是什么？</h3></li>
</ol>
<ul>
<li>若元素为父子关系，触发条件则添加给父元素。</li>
<li>若元素为兄弟关系，触发条件添加给第二个元素。<h3 id="BFC可以解决什么问题？"><a href="#BFC可以解决什么问题？" class="headerlink" title="BFC可以解决什么问题？"></a>BFC可以解决什么问题？</h3></li>
</ul>
<ol>
<li>高度塌陷</li>
<li>margin折叠</li>
<li>浮动脱离文档流</li>
<li>子元素传递给父元素的<code>margin-top</code></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>标签分类</title>
    <url>/2021/07/21/%E6%A0%87%E7%AD%BE%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<p>-</p>
<h2 id="HTML常用标签分类"><a href="#HTML常用标签分类" class="headerlink" title="HTML常用标签分类"></a>HTML常用标签分类</h2><ul>
<li><p>行内元素：不独立成行；不能设定宽高；只嵌套文本；添加<code>margin-top/bottom</code>与<code>padding-top/bottom</code>无效。</p>
</li>
<li><p>块级元素：独立成行；可以设定其宽高；可作为其他元素的父元素（<code>p</code>标签除外）。</p>
</li>
<li><p>行内块元素：不独立成行，可改变宽高。</p>
<span id="more"></span></li>
<li><p>可变元素：即可根据上下文决定是块级元素或是行内元素，即设置display属性。</p>
</li>
<li><p>空元素：没有内容的元素即为空元素，例如<code>br</code>、<code>hr</code>、<code>input</code>、<code>img</code>、<code>link</code>。</p>
</li>
<li><p>不可替换元素：HTML大多数元素是不可替换元素，就是直接表现出来的。</p>
</li>
<li><p>可替换元素：根据元素标签和属性，决定显示内容；替换元素一般都有内在尺寸，例如<code>img</code>、<code>input</code>。</p>
<blockquote>
<p>HTML标签大致可分为行内元素和块级元素，其他分类都是细分或根据不同角度进行分类，因此我们只讨论常用的行内元素和常用的块级元素。</p>
</blockquote>
<h3 id="常用行内元素有哪些？"><a href="#常用行内元素有哪些？" class="headerlink" title="常用行内元素有哪些？"></a>常用行内元素有哪些？</h3><ul>
<li><code>a</code> - 超链接</li>
<li><code>i</code> - 斜体</li>
<li><code>img</code> - 图片（行内块元素）</li>
<li><code>input</code> - 输入框(行内块元素)</li>
<li><code>label</code> - 表格标签</li>
<li><code>select</code> - 项目选择</li>
<li><code>span</code> - 定义文本区块</li>
<li><code>textarea</code> - 多行文本输入框</li>
</ul>
<h3 id="常用块级元素-有哪些？"><a href="#常用块级元素-有哪些？" class="headerlink" title="常用块级元素 有哪些？"></a>常用块级元素 有哪些？</h3><ul>
<li><code>div</code> - 常用块级</li>
<li><code>dl</code> - 自定义列表</li>
<li><code>fieldset</code> - form控制组</li>
<li><code>form</code> - 交互表单</li>
<li><code>h1</code>-<code>h6</code>-标题</li>
<li><code>hr</code> - 水平分隔线</li>
<li><code>menu</code> - 菜单列表</li>
<li><code>ol</code> - 有序表单</li>
<li><code>p</code> - 段落</li>
<li><code>table</code> - 表格</li>
<li><code>ul</code> - 无序列表</li>
</ul>
</li>
</ul>
<hr>
<h3 id="img真的是行内元素吗？"><a href="#img真的是行内元素吗？" class="headerlink" title="img真的是行内元素吗？"></a><code>img</code>真的是行内元素吗？</h3><p>​    既然是行内元素为什么可以设置宽高呢？<strong>其实<code>img</code>属于替换元素，其内有设置宽高属性。</strong></p>
<p>​    <code>img</code>标签同时具有行内、行内块和块级元素特性。</p>
<hr>
<h3 id="行内元素如何转为块元素？"><a href="#行内元素如何转为块元素？" class="headerlink" title="行内元素如何转为块元素？"></a>行内元素如何转为块元素？</h3><ul>
<li>添加<code>display</code>属性：<code>display:block</code>；</li>
<li>添加定位：<code>position:absolute/fixed</code>；</li>
<li>添加浮动:<code>float:left/right/center</code>；</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>即将</title>
    <url>/2021/07/12/%E5%8D%B3%E5%B0%86/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入密码</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19PsmuWyLlk5kIZq3Q7jeYkocteVTcFNtkgCyKjSST7iJYeVogxvB/xvTAPnfbueQrVrLHeA37VI40xMQ9LcQ7NuSHzC2uSCWw/mxQMj5k51BQAhpNntuzO1NTI2ZPrv9o8TXQkIkY3ycqmUgBa2cedpIp0rkd4BeGSprbg11fg87HIhfKzrazlfsjn66PzVIffnuxpsbjzKFJNInUv2+NMX2bvFI2x+ykGrXhPHLwFqBPYHHmyY5NkctwQy2tCorFUW2Ne+5QQCuK9HA5yGWStS8j0gRi7T1A8ltq1ElOJDhVNzLr5RWdqQYwUxWECOn8t2er7cb6Q3Nt1qZ48YKX2MBYd8z4bHUB7EvrqCTotF12BhsmKPPWyI8HXUOMJBvu1X7sjR4hLg60wOxCcm7IvxfOcWoaG1xVbhkPqx4B9Lh5kxTYWG3dD/5K4mHQQfTdBA5md1iKzCRqkmVbrS0aZWw2jAECuOxsWub5JrJuM5ZefM64I6+kqXwLtbHMyjxSZMfxnoaPEGWOU4e54qMW+zzNPIJ54ZyJDv1INIVixdWtgCBoFEQ+Nl+XF27WQRS6gF93X2rbHNTYrLWcC23brhK6u8oZBfZesBQj6q1i/96tgzAok0xPC5ea3SgPW85M7VLRE54hEbag4t3sm7cNXHIc+rr5hL/yEinqxUWVTycpkzJVh+t6IeyCVfBhTSC5KL0SLXDOJ1LHJrGYNEIUpHAaftn90fqLWRaL/lsN0JOxnoZVKvCl98LCAJuea2+IN7085iS/n2t97JNiXNo+7hSMooKUpSLZq9K+yDGmoEfLVJ89oJ6o2Pjnl2vHo7cG2+k6lSeBjquE8yvIWpfvEXXYSlb1I80faDdyfMIYG3dGZW9P95yM4oqq6QglXXLVZIwL2eMLChsFUnZMFnRYznBaTwCsJMGJSdMqFBNUff1HpywuunuLgHSomu5gbY92QUyLbjEQpDx5ugjUcAH2vvQA4mB8c3o3SUTDugPWoqUCqeWivDRGR </div>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>安好</title>
    <url>/2021/07/12/%E5%AE%89%E5%A5%BD/</url>
    <content><![CDATA[<p>-</p>
<center>媚眼含羞合，丹唇逐笑开。风卷葡萄带，日照石榴裙。

</center>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
</search>
